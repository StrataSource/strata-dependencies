diff --git a/src/fcxml.c b/src/fcxml.c
index 83019c0..7fcd4a4 100644
--- a/src/fcxml.c
+++ b/src/fcxml.c
@@ -410,6 +410,7 @@ typedef enum _FcElement {
     FcElementCeil,
     FcElementRound,
     FcElementTrunc,
+    FcElementFontPattern,
     FcElementUnknown
 } FcElement;
 
@@ -475,6 +476,7 @@ static const struct {
     { "ceil",		FcElementCeil },
     { "round",		FcElementRound },
     { "trunc",		FcElementTrunc },
+    { "fontpattern",	FcElementFontPattern },
 };
 #define NUM_ELEMENT_MAPS (int) (sizeof fcElementMap / sizeof fcElementMap[0])
 
@@ -2281,6 +2283,34 @@ FcParseUnary (FcConfigParse *parse, FcOp op)
 	FcVStackPushExpr (parse, FcVStackExpr, expr);
 }
 
+static void
+FCParseFontPattern (FcConfigParse *parse)
+{
+    FcChar8 *s;
+
+    if (!parse->pstack)
+        return;
+    s = FcStrBufDoneStatic (&parse->pstack->str);
+    if (!s)
+    {
+        FcConfigMessage (parse, FcSevereError, "out of memory");
+        return;
+    }
+
+    if ( !strlen (s) )
+    {
+        FcConfigMessage (parse, FcSevereInfo, "empty font pattern name ignored");
+        goto cleanup;
+    }
+
+    if (!FcStrSetAdd (parse->config->availConfigFiles, s))
+    {
+        FcConfigMessage (parse, FcSevereError, "out of memory; cannot add pattern %s", s);
+    }
+cleanup:
+    FcStrBufDestroy (&parse->pstack->str);
+}
+
 static void
 FcParseDir (FcConfigParse *parse)
 {
@@ -3280,6 +3310,9 @@ FcEndElement(void *userData, const XML_Char *name FC_UNUSED)
     case FcElementTrunc:
 	FcParseUnary (parse, FcOpTrunc);
 	break;
+    case FcElementFontPattern:
+	FCParseFontPattern(parse);
+	break;
     case FcElementUnknown:
 	break;
     }
